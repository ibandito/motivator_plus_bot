import logging
import random
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = API_TOKEN = "7458160287:AAFn3FNZHGr8wQBTV-eKL9YmzeaDi-7Gm8Y"

ADMIN_ID = 217716970

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

conn = sqlite3.connect('subscribers.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS subscribers (user_id INTEGER PRIMARY KEY)''')
conn.commit()

cursor.execute("INSERT OR IGNORE INTO subscribers (user_id) VALUES (?)", (ADMIN_ID,))
conn.commit()

def get_random_quote():
    with open("quotes.txt", encoding="utf-8") as f:
        quotes = f.readlines()
    return random.choice(quotes).strip()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä+ üí™\n/–º–æ—Ç–∏–≤—É–π\n/–ø—ñ–¥–ø–∏—Å–∫–∞\n/–≤—ñ–¥–ø–∏—Å–∫–∞")

@dp.message_handler(commands=['–º–æ—Ç–∏–≤—É–π'])
async def motivate(message: types.Message):
    quote = get_random_quote()
    await message.reply(f"üí• {quote}")

@dp.message_handler(commands=['–ø—ñ–¥–ø–∏—Å–∫–∞'])
async def subscribe(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR IGNORE INTO subscribers (user_id) VALUES (?)", (user_id,))
    conn.commit()
    await message.reply("üîî –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É –º–æ—Ç–∏–≤–∞—Ü—ñ—é!")

@dp.message_handler(commands=['–≤—ñ–¥–ø–∏—Å–∫–∞'])
async def unsubscribe(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("DELETE FROM subscribers WHERE user_id = ?", (user_id,))
    conn.commit()
    await message.reply("‚ùå –¢–∏ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è.")

async def send_daily_quotes():
    cursor.execute("SELECT user_id FROM subscribers")
    users = cursor.fetchall()
    quote = get_random_quote()
    for (user_id,) in users:
        try:
            await bot.send_message(user_id, f"üåû –î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫!\nüí° {quote}")
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {user_id}: {e}")

if __name__ == '__main__':
    scheduler.add_job(send_daily_quotes, 'interval', hours=24)
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)

from aiogram import Bot, Dispatcher, executor, types
import random

API_TOKEN = "—Ç—É—Ç_—Ç–≤—ñ–π_—Ç–æ–∫–µ–Ω_–≤_–ª–∞–ø–∫–∞—Ö"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–∏–∫–ª–∞–¥–∏ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
MOTIVATIONS = {
    "—Å–ø–æ—Ä—Ç": [
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –ö–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî —Ü–µ –Ω–æ–≤–∏–π —à–∞–Ω—Å —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º!",
        "–ù–µ –∑—É–ø–∏–Ω—è–π—Å—è, –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ—à –≥–æ—Ä–¥–∏—Ç–∏—Å—è —Å–æ–±–æ—é!",
        "–¢–≤—ñ–π –ø–æ—Ç —Å—å–æ–≥–æ–¥–Ω—ñ ‚Äî —Ü–µ —Ç–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–≤—Ç—Ä–∞!"
    ],
    "—Ä–æ–±–æ—Ç–∞": [
        "üíº –í–∞–∂–∫–∞ –ø—Ä–∞—Ü—è —Å—å–æ–≥–æ–¥–Ω—ñ ‚Äî —É—Å–ø—ñ—Ö –∑–∞–≤—Ç—Ä–∞.",
        "–ö–æ–∂–µ–Ω –º–∞–ª–µ–Ω—å–∫–∏–π –∫—Ä–æ–∫ –≤–µ–¥–µ –¥–æ –≤–µ–ª–∏–∫–æ—ó –º–µ—Ç–∏!",
        "–ù–µ –±—ñ–π—Å—è –≤–∏–∫–ª–∏–∫—ñ–≤ ‚Äî –≤–æ–Ω–∏ —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ —Å–∏–ª—å–Ω—ñ—à–∏–º!"
    ],
    "–Ω–∞–≤—á–∞–Ω–Ω—è": [
        "üìö –ó–Ω–∞–Ω–Ω—è ‚Äî —Ü–µ –Ω–∞–π–∫—Ä–∞—â–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ —Å–µ–±–µ!",
        "–ù–∞–≤—á–∞–π—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ, —â–æ–± –∑–∞–≤—Ç—Ä–∞ –±—É—Ç–∏ –∫—Ä–∞—â–∏–º.",
        "–¢–≤—ñ–π –º–æ–∑–æ–∫ ‚Äî —Ç–≤—ñ–π –Ω–∞–π–∫—Ä–∞—â–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç!"
    ],
    "—Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–æ–∫": [
        "üå± –ó–º—ñ–Ω–∏ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ —Ç–µ–±–µ.",
        "–°—Ç–∞–Ω—å –≤–µ—Ä—Å—ñ—î—é —Å–µ–±–µ, —è–∫–æ—é –±—É–¥–µ—à –ø–∏—à–∞—Ç–∏—Å—è.",
        "–†—É—Ö–∞–π—Å—è –≤–ø–µ—Ä–µ–¥, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ–≤—ñ–ª—å–Ω–æ!"
    ],
}

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="–°–ø–æ—Ä—Ç", callback_data="—Å–ø–æ—Ä—Ç"),
        types.InlineKeyboardButton(text="–†–æ–±–æ—Ç–∞", callback_data="—Ä–æ–±–æ—Ç–∞"),
        types.InlineKeyboardButton(text="–ù–∞–≤—á–∞–Ω–Ω—è", callback_data="–Ω–∞–≤—á–∞–Ω–Ω—è"),
        types.InlineKeyboardButton(text="–°–∞–º–æ—Ä–æ–∑–≤–∏—Ç–æ–∫", callback_data="—Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–æ–∫"),
    ]
    keyboard.add(*buttons)
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –º–æ—Ç–∏–≤–∞—Ü—ñ—ó üëá",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data in MOTIVATIONS)
async def process_callback(callback_query: types.CallbackQuery):
    category = callback_query.data
    text = random.choice(MOTIVATIONS[category])
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

